<?xml version="1.0" encoding="UTF-8"?>
<!--
    status : 这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,会看到log4j2内部各种详细输出
    monitorInterval : Log4j能够自动检测修改配置文件和重新配置本身, 设置间隔秒数。此处表示每隔600秒重读一次配置文件
-->
<Configuration status="WARN" monitorInterval="600">
    <!--日志级别：TRACE < DEBUG < INFO < WARN < ERROR < FATAL-->
    <!--如果设置为WARN，则低于WARN的信息都不会输出-->
    <Properties>
        <!-- 配置日志文件输出目录 -->
        <Property name="LOG_PATH">${sys:LOG_PATH}</Property>
        <property name="CHARSET">UTF-8</property>
        <property name="APP_NAME">${spring:spring.application.name}</property>
        <!--日志输出的格式-->
        <!--
            %d{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间,输出到毫秒的时间
            %-5level : 输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补0
            %c : logger的名称(%logger)
            %t : 输出当前线程名称
            %p : 日志输出格式
            %m : 日志内容，即 logger.info("message")
            %n : 换行符
            %C : Java类名(%F)
            %L : 行号
            %M : 方法名
            %l : 输出语句所在的行数, 包括类名、方法名、文件名、行数
            hostName : 本地机器名
            hostAddress : 本地ip地址
         -->
        <!--<property name="LOG_PATTERN">%d{yyyy-MM-dd 'at' HH:mm:ss z} ${APP_NAME} [%thread] %highlight{%-5level} %logger{36} %L %M - %msg%xEx%n</property>-->
        <property name="LOG_PATTERN">%d{yyyy-MM-dd HH:mm:ss.SSS} ${APP_NAME} %highlight{%-5level}[%thread] %style{%logger{36}}{cyan} : %msg%n</property>
    </Properties>

    <Appenders>
        <!-- 这个输出控制台的配置 -->
        <Console name="Console" target="SYSTEM_OUT" follow="true">
            <!--控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN}" charset="${CHARSET}"/>
        </Console>

        <!--
            循环日志文件：日志文件大于阀值的时候，就开始写一个新的日志文件
            这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档
            fileName    : 指定当前日志文件的位置和文件名称
            filePattern : 指定当发生Rolling时，文件的转移和重命名规则
            SizeBasedTriggeringPolicy : 指定当文件体积大于size指定的值时，触发Rolling
            DefaultRolloverStrategy : 指定最多保存的文件个数
            TimeBasedTriggeringPolicy : 这个配置需要和filePattern结合使用
                注意filePattern中配置的文件重命名规则是${FILE_NAME}_%d{yyyy-MM-dd}_%i，最小的时间粒度是dd，即天，
                TimeBasedTriggeringPolicy指定的size是1，结合起来就是每1天生成一个新文件
        -->
        <RollingRandomAccessFile name="INFO" fileName="${LOG_PATH}/info/info.log" immediateFlush="false"
                                 filePattern="${LOG_PATH}/info/info-%d{yyyy-MM-dd}-%i.log">
            <Filters>
                <!-- 如果是 WARN 级别以上的拒绝 -->
                <ThresholdFilter level="WARN" onMatch="DENY" onMismatch="NEUTRAL"/>
                <!-- 只输出 INFO 级别的 -->
                <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <PatternLayout pattern="${LOG_PATTERN}" charset="${CHARSET}"/>
            <Policies>
                <!-- 在小时可被 2 整除时每 2 小时滚动一次 -->
                <TimeBasedTriggeringPolicy interval="2" modulate="true"/>
                <!-- 一旦文件达到 10 MB 就会发生一次滚动生成新的日志文件 -->
                <SizeBasedTriggeringPolicy size="10 MB"/>
            </Policies>
            <!-- 最多保留200个文件 -->
            <DefaultRolloverStrategy max="200">
                <!-- 删除策略，basePath是要删除的根目录，maxDepth表示在这个目录往下找子目录最多找几层 -->
                <Delete basePath="${LOG_PATH}" maxDepth="2">
                    <IfFileName glob="*/info-*.log">
                        <!-- 最后修改时间是90天之前的日志都删掉-->
                        <IfLastModified age="P90D">
                            <IfAny>
                                <!-- 但是总容量小于500GB 或者文件数量少于10个的例外 -->
                                <IfAccumulatedFileSize exceeds="500 GB" />
                                <IfAccumulatedFileCount exceeds="10" />
                            </IfAny>
                        </IfLastModified>
                    </IfFileName>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingRandomAccessFile>

        <!-- 错误信息记录 -->
        <RollingRandomAccessFile name="ERROR" fileName="${LOG_PATH}/error/error.log" immediateFlush="false"
                                 filePattern="${LOG_PATH}/error/error-%d{yyyy-MM-dd}-%i.log">
            <Filters>
                <!-- 如果是 FATAL 级别以上的拒绝 -->
                <ThresholdFilter level="FATAL" onMatch="DENY" onMismatch="NEUTRAL"/>
                <!-- 只输出 WARN 级别的 -->
                <ThresholdFilter level="WARN" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <PatternLayout pattern="${LOG_PATTERN}" charset="${CHARSET}"/>
            <Policies>
                <!-- 在小时可被 2 整除时每 2 小时滚动一次 -->
                <TimeBasedTriggeringPolicy interval="2" modulate="true"/>
                <!-- 一旦文件达到 10 MB 就会发生一次滚动生成新的日志文件 -->
                <SizeBasedTriggeringPolicy size="10 MB"/>
            </Policies>
            <!-- 最多保留200个文件 -->
            <DefaultRolloverStrategy max="200">
                <!-- 删除策略，basePath是要删除的根目录，maxDepth表示在这个目录往下找子目录最多找几层 -->
                <Delete basePath="${LOG_PATH}" maxDepth="2">
                    <IfFileName glob="*/error-*.log">
                        <!-- 最后修改时间是90天之前的日志都删掉 -->
                        <IfLastModified age="P90D">
                            <IfAny>
                                <!-- 但是总容量小于500GB 或者文件数量少于10个的例外 -->
                                <IfAccumulatedFileSize exceeds="500 GB" />
                                <IfAccumulatedFileCount exceeds="10" />
                            </IfAny>
                        </IfLastModified>
                    </IfFileName>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingRandomAccessFile>

        <!-- 系统级别的错误信息 -->
        <RollingRandomAccessFile name="FATAL" fileName="${LOG_PATH}/fatal/fatal.log" immediateFlush="false"
                                 filePattern="${LOG_PATH}/fatal/fatal-%d{yyyy-MM-dd}-%i.log">
            <!-- 只输出 FATAL 级别的 -->
            <ThresholdFilter level="FATAL" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN}" charset="${CHARSET}"/>
            <Policies>
                <!-- 在小时可被 2 整除时每 2 小时滚动一次 -->
                <TimeBasedTriggeringPolicy interval="2" modulate="true"/>
                <!-- 一旦文件达到 10 MB 就会发生一次滚动生成新的日志文件 -->
                <SizeBasedTriggeringPolicy size="10 MB"/>
            </Policies>
            <!-- 最多保留200个文件 -->
            <DefaultRolloverStrategy max="200">
                <!-- 删除策略，basePath是要删除的根目录，maxDepth表示在这个目录往下找子目录最多找几层 -->
                <Delete basePath="${LOG_PATH}" maxDepth="2">
                    <IfFileName glob="*/fatal-*.log">
                        <!-- 最后修改时间是 90 天之前的日志都删掉 -->
                        <IfLastModified age="P90D">
                            <IfAny>
                                <!-- 但是总容量小于 500GB 或者文件数量少于 10 个的例外 -->
                                <IfAccumulatedFileSize exceeds="500 GB" />
                                <IfAccumulatedFileCount exceeds="10" />
                            </IfAny>
                        </IfLastModified>
                    </IfFileName>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingRandomAccessFile>

        <!-- 全部日志信息: DEBUG 及以上级别 -->
        <RollingRandomAccessFile name="ALL" fileName="${LOG_PATH}/all/all.log" immediateFlush="false"
                                 filePattern="${LOG_PATH}/all/all-%d{yyyy-MM-dd}-%i.log.gz">
            <!-- 输出 DEBUG 及以上级别 -->
            <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN}" charset="${CHARSET}"/>
            <Policies>
                <!-- 在小时可被 2 整除时每 2 小时滚动一次 -->
                <TimeBasedTriggeringPolicy interval="2" modulate="true"/>
                <!-- 一旦文件达到 10 MB 就会发生一次滚动生成新的日志文件 -->
                <SizeBasedTriggeringPolicy size="10 MB"/>
            </Policies>
            <!-- 最多保留200个文件 -->
            <DefaultRolloverStrategy max="200">
                <!-- 删除策略，basePath是要删除的根目录，maxDepth表示在这个目录往下找子目录最多找几层-->
                <Delete basePath="${LOG_PATH}" maxDepth="2">
                    <IfFileName glob="*/all-*.log">
                        <!-- 最后修改时间是90天之前的日志都删掉-->
                        <IfLastModified age="P90D">
                            <IfAny>
                                <!-- 但是总容量小于500GB 或者文件数量少于10个的例外-->
                                <IfAccumulatedFileSize exceeds="500 GB" />
                                <IfAccumulatedFileCount exceeds="10" />
                            </IfAny>
                        </IfLastModified>
                    </IfFileName>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingRandomAccessFile>
    </Appenders>

    <!-- 定义 logger，只有定义了 logger 并引入 appender ，appender 才会生效 -->
    <Loggers>
        <AsyncLogger name="org.apache.catalina.startup.DigesterFactory" level="ERROR" />
        <AsyncLogger name="org.apache.catalina.util.LifecycleBase" level="ERROR" />
        <AsyncLogger name="org.apache.coyote.http11.Http11NioProtocol" level="WARN" />
        <AsyncLogger name="org.apache.sshd.common.util.SecurityUtils" level="WARN"/>
        <AsyncLogger name="org.apache.tomcat.util.net.NioSelectorPool" level="WARN" />
        <AsyncLogger name="org.eclipse.jetty.util.component.AbstractLifeCycle" level="ERROR" />
        <AsyncLogger name="org.hibernate.validator.internal.util.Version" level="WARN" />
        <AsyncLogger name="org.springframework.boot.actuate.endpoint.jmx" level="WARN"/>
        <AsyncLogger name="org.apache.kafka" level="WARN" />

        <!-- 开发环境 -->
        <SpringProfile name="dev">
            <!-- 这儿为trace表示什么都可以打印出来了,其他几个级别分别为：TRACE、DEBUG、INFO、WARN、ERROR、FATAL。
                 若是 additivity 设为 false，则 子Logger 只会在自己的 appender 里输出，而不会在 父Logger 的 appender 里输出。
                 includelocation 是否包含位置，提取位置是一项成本高昂的操作（它可能会使日志记录速度降低 5 - 20 倍）。 -->
            <AsyncRoot level="INFO" additivity="false" includelocation="true">
                <AppenderRef ref="Console"/>
            </AsyncRoot>
        </SpringProfile>

        <!-- 测试环境 -->
        <SpringProfile name="stage">
            <AsyncRoot level="INFO" additivity="false" includelocation="true">
                <AppenderRef ref="Console"/>
                <AppenderRef ref="INFO"/>
                <AppenderRef ref="ERROR"/>
                <AppenderRef ref="FATAL"/>
                <AppenderRef ref="ALL"/>
            </AsyncRoot>
        </SpringProfile>

        <!-- 生产环境 -->
        <SpringProfile name="online">
            <AsyncRoot level="INFO" additivity="false" includelocation="true">
                <AppenderRef ref="INFO"/>
                <AppenderRef ref="ERROR"/>
                <AppenderRef ref="FATAL"/>
            </AsyncRoot>
        </SpringProfile>
    </Loggers>

</Configuration>